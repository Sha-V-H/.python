
#xkcd_comic.....
import os
import requests
from bs4 import BeautifulSoup

url = 'https://xkcd.com/1/'
comics_folder = 'xkcd_comics'

if not os.path.exists(comics_folder):
    os.makedirs(comics_folder)

def download_comic(url):
    response = requests.get(url)
    response.raise_for_status()
    soup = BeautifulSoup(response.text, 'html.parser')
    comic_elem = soup.select('#comic img')

    if comic_elem:
        comic_url = 'https:' + comic_elem[0].get('src')
        image_response = requests.get(comic_url)
        image_response.raise_for_status()
        image_filename = os.path.basename(comic_url)
        image_path = os.path.join(comics_folder, image_filename)

        with open(image_path, 'wb') as image_file:
            for chunk in image_response.iter_content(100000):
                image_file.write(chunk)

        print(f'Downloaded: {image_filename}')
    else:
        print('Comic image not found.')

while url:
    download_comic(url)

    response = requests.get(url)
    response.raise_for_status()
    soup = BeautifulSoup(response.text, 'html.parser')
    prev_link = soup.select('a[rel="prev"]')

    if prev_link:
        url = 'https://xkcd.com' + prev_link[0].get('href')
    else:
        url = None

print('All comics downloaded.')

#pdf_edit...........

from PyPDF2 import PdfWriter, PdfReader

num = int(input("Enter page number you want to combine from multiple documents "))

pdf1 = open('8a.pdf', 'rb')
pdf2 = open('9a&9b.pdf', 'rb')

pdf_writer = PdfWriter()

pdf_reader = PdfReader(pdf1)
page = pdf_reader.pages[num - 1]
pdf_writer.add_page(page)

pdf_reader = PdfReader(pdf2)
page = pdf_reader.pages[num - 1]
pdf_writer.add_page(page)

with open('output.pdf', 'wb') as output:
    pdf_writer.write(output)

#Excel_worksheet.........

from openpyxl import Workbook
from openpyxl.styles import Font

# Define your data
state = ["Karnataka", "Telangana", "Tamil Nadu"]
lang = ["Kannada", "Telugu", "Tamil"]
code = ['KA', 'TS', 'TN']
capital = ["Bengaluru", "Hyderabad", "Chennai"]

# Create a new workbook
wb = Workbook()

# Create and populate the "Language" sheet
language_sheet = wb.active
language_sheet.title = "Language"
header = ["State", "Language", "Code"]
language_data = list(zip(state, lang, code))
language_sheet.append(header)
for row in language_data:
 language_sheet.append(row) 

# Apply bold formatting to the header row
for cell in language_sheet["1:1"]:
    cell.font = Font(bold=True)

# Create and populate the "Capital" sheet
capital_sheet = wb.create_sheet(title="Capital")
header = ["State", "Capital", "Code"]
capital_data = list(zip(state, capital, code))
capital_sheet.append(header)
[capital_sheet.append(row) for row in capital_data]

# Apply bold formatting to the header row
for cell in capital_sheet["1:1"]:
    cell.font = Font(bold=True)

# Save the workbook
wb.save("demo.xlsx")


# weather_data.............

import requests

def fetch_weather_data(api_key, city):
    base_url = "http://api.openweathermap.org/data/2.5/weather"
    params = {
        "q": city,
        "appid": api_key,
        "units": "metric"  # You can change this to "imperial" for Fahrenheit
    }
    response = requests.get(base_url, params=params)
    weather_data = response.json()
    return weather_data

def display_weather_data(weather_data):
    print("Weather in", weather_data["name"])
    print("Temperature:", weather_data["main"]["temp"], "Â°C")
    print("Description:", weather_data["weather"][0]["description"])

if __name__ == "__main__":
    api_key = "2317916dc5163e8f690e1b3df60101a9"
    city = input("Enter city name: ")
    weather_data = fetch_weather_data(api_key, city)
    
    if "cod" in weather_data and weather_data["cod"] == 200:
        display_weather_data(weather_data)
    else:
        print("City not found or error fetching weather data.")


#2nd_a.............................

def fibonacci(n):
 if n==1:
  return 0
 elif n==2:
  return 1
 else:
  return fibonacci(n-1)+fibonacci(n-2)
a=int(input('enter at which place you want the fibonacci number'))
if a==0:
 print('wrong input')
else:
 print('fn(',a,')=',str(fibonacci(a)))

#2nd_b...............................

def bin2Dec(val):
    rev=val[::-1]
    dec = 0
    i = 0
    for dig in rev:
        dec += int(dig) * 2**i
        i += 1
    
    return dec

def oct2Hex(val):
    rev=val[::-1]
    dec = 0
    i = 0
    for dig in rev:
        dec += int(dig) * 8**i
        i += 1
    list=[]
    while dec != 0:
        list.append(dec%16)
        dec = dec // 16
        
    nl=[]
    for elem in list[::-1]:
        if elem <= 9:
            nl.append(str(elem))
        else:
            nl.append(chr(ord('A') + (elem -10)))
    hex = "".join(nl)
    
    return hex
num1 = input("Enter a binary number : ")    
print(bin2Dec(num1))
num2 = input("Enter a octal number : ")
print(oct2Hex(num2))


#3a........................

sentence = input("Enter a sentence : ")

wordList = sentence.split(" ")
print("This sentence has", len(wordList), "words")

digCnt = upCnt = loCnt = 0

for ch in sentence:
    if '0' <= ch <= '9':
        digCnt += 1
    elif 'A' <= ch <= 'Z':
        upCnt += 1
    elif 'a' <= ch <= 'z':
        loCnt += 1

print("This sentence has", digCnt, "digits", upCnt, "upper case letters", loCnt, "lower case letters")

#3b........................

str1 = input("Enter String 1 \n")
str2 = input("Enter String 2 \n")

if len(str2) < len(str1):
    short = len(str2)
    long = len(str1)
else:
    short = len(str1)
    long = len(str2)
    

matchCnt = 0
for i in range(short):
    if str1[i] == str2[i]:
        matchCnt += 1

print("Similarity between two said strings:")
print(matchCnt/long)

#4th.....................................

import random

def merge_sort(lst):
    if len(lst) > 1:
        mid = len(lst) // 2
        left_half = lst[:mid]
        right_half = lst[mid:]

        merge_sort(left_half)
        merge_sort(right_half)

        i = j = k = 0

        while i < len(left_half) and j < len(right_half):
            if left_half[i] < right_half[j]:
                lst[k] = left_half[i]
                i += 1
            else:
                lst[k] = right_half[j]
                j += 1
            k += 1

        while i < len(left_half):
            lst[k] = left_half[i]
            i += 1
            k += 1

        while j < len(right_half):
            lst[k] = right_half[j]
            j += 1
            k += 1

    return lst


def insertion_sort(arr):
    for i in range(1, len(arr)):
        key = arr[i]
        j = i - 1
        while j >= 0 and key < arr[j]:
            arr[j + 1] = arr[j]
            j -= 1
        arr[j + 1] = key

my_list = []

for i in range(10):
    my_list.append(random.randint(0, 999))

print("\nUnsorted List")
print(my_list)
print("Sorting using Insertion Sort")
insertion_sort(my_list)
print(my_list)


my_list = []

for i in range(10):
    my_list.append(random.randint(0, 999))

print("\nUnsorted List")
print(my_list)
print("Sorting using Merge Sort")
merge_sort(my_list)
print(my_list)


#4b.................................


def roman2Dec(romStr):
    roman_dict ={'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}
    romanBack = list(romStr)[::-1]
    value = 0
    rightVal = roman_dict[romanBack[0]]  
    for numeral in romanBack:
        leftVal = roman_dict[numeral]
        if leftVal < rightVal:
           value -= leftVal
        else:
            value += leftVal
        rightVal = leftVal
    return value
romanStr = input("Enter a Roman Number : ")
print(roman2Dec(romanStr))

#5a.........................................

import re


def isphonenumber(numStr):
    if len(numStr) != 12:
        return False
    for i in range(len(numStr)):
        if i==3 or i==7:
            if numStr[i] != "-":
                return False
        else:
            if numStr[i].isdigit() == False:
                return False
    return True


def chkphonenumber(numStr):
    ph_no_pattern = re.compile(r'^\d{3}-\d{3}-\d{4}$')
    if ph_no_pattern.match(numStr):
        return True
    else:
        return False

ph_num = input("Enter a phone number : ")
print("Without using Regular Expression")
if isphonenumber(ph_num):
    print("Valid phone number")
else:
    print("Invalid phone number")

print("Using Regular Expression")
if chkphonenumber(ph_num):
    print("Valid phone number")
else:
    print("Invalid phone number")

#5b...................................

import re
phone_regex = re.compile(r'\+\d{12}')
email_regex = re.compile(r'[A-Za-z0-9._]+@[A-Za-z0-9]+\.[A-Z|a-z]{2,}') 

with open('example.txt', 'r') as f:
    # Loop through each line in the file
    for line in f:
        # Search for phone numbers in the line
        matches = phone_regex.findall(line)
        # Print any matches found
        for match in matches:
            print(match)

        matches = email_regex.findall(line)
        # Print any matches found
        for match in matches:
            print(match)


#6a......................................

import os.path
import sys

fname = input("Enter the filename : ")      

if not os.path.isfile(fname):
    print("File", fname, "doesn't exists")
    sys.exit(0)

infile = open(fname, "r")

lineList = infile.readlines()

for i in range(20):
    print(i+1, ":", lineList[i])
    
word = input("Enter a word : ")
cnt = 0
for line in lineList:
    cnt += line.count(word)

print("The word", word, "appears", cnt, "times in the file")

#6b..........................................

import os
import sys
import pathlib
import zipfile

dirName = input("Enter Directory name that you want to backup : ")

if not os.path.isdir(dirName):
    print("Directory", dirName, "doesn't exists")
    sys.exit(0)
    
curDirectory = pathlib.Path(dirName)
    
with zipfile.ZipFile("myZip.zip", mode="w") as archive:
    for file_path in curDirectory.rglob("*"):
        archive.write(file_path, arcname=file_path.relative_to(curDirectory))
    
if os.path.isfile("myZip.zip"):
    print("Archive", "myZip.zip", "created successfully")
else:
    print("Error in creating zip archive")

#7a.............................................

import math

class Shape:
    def __init__(self):
        self.area = 0
        self.name = ""
        
    def showArea(self):
        print("The area of the", self.name, "is", self.area, "units")
        
class Circle(Shape):
    def __init__(self,radius):
        self.area = 0
        self.name = "Circle"
        self.radius = radius
        
    def calcArea(self):
        self.area = math.pi * self.radius * self.radius
    
class Rectangle(Shape):
    def __init__(self,length,breadth):
        self.area = 0
        self.name = "Rectangle"
        self.length = length
        self.breadth = breadth
        
    def calcArea(self):
        self.area = self.length * self.breadth

class Triangle(Shape):
    def __init__(self,base,height):
        self.area = 0
        self.name = "Triangle"
        self.base = base
        self.height = height
        
    def calcArea(self):
        self.area = self.base * self.height / 2
    

    
c1 = Circle(5)
c1.calcArea()
c1.showArea()
r1 = Rectangle(5, 4)
r1.calcArea()
r1.showArea()
t1 = Triangle(3, 4)
t1.calcArea()
t1.showArea()

#7b.............................

class Employee:
    def __init__(self):
        self.name = ""
        self.empId = ""
        self.dept = ""
        self.salary = 0
        
    def getEmpDetails(self):
        self.name = input("Enter Employee name : ")
        self.empId = input("Enter Employee ID : ")
        self.dept = input("Enter Employee Dept : ")
        self.salary = int(input("Enter Employee Salary : "))
        
    def showEmpDetails(self):
        print("Employee Details")
        print("Name : ", self.name)
        print("ID : ", self.empId)
        print("Dept : ", self.dept)
        print("Salary : ", self.salary)
        
    def updtSalary(self):
        self.salary = int(input("Enter new Salary : "))
        print("Updated Salary", self.salary)
        

e1 = Employee()
e1.getEmpDetails()
e1.showEmpDetails()
e1.updtSalary()

#8th.........................

class PaliStr:
    def __init__(self):
        self.isPali = False
        
    def chkPalindrome(self, myStr):
        if myStr == myStr[::-1]:
            self.isPali = True
        else:
            self.isPali = False
            
        return self.isPali
            
class PaliInt(PaliStr):
    def __init__(self):
        self.isPali = False
        
    def chkPalindrome(self, val):
        temp = val
        rev = 0
        while temp != 0:
            dig = temp % 10
            rev = (rev*10) + dig
            temp = temp //10
            
        if val == rev:
            self.isPali = True
        else:
            self.isPali = False
        
        return self.isPali

st = input("Enter a string : ")

stObj = PaliStr()
if stObj.chkPalindrome(st):
    print("Given string is a Palindrome")
else:
    print("Given string is not a Palindrome")

val = int(input("Enter a integer : "))    

intObj = PaliInt()
if intObj.chkPalindrome(val):
    print("Given integer is a Palindrome")
else:
    print("Given integer is not a Palindrome")
